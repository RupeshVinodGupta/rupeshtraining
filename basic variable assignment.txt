Q1. Write all the conventions being followed while declaring a variable.

ans:-
1)Variable names should start with a letter or an underscore. They cannot start with a number.

2)Variable names should consist of only letters, numbers, and underscores. They cannot contain spaces or other special characters.

3)Variable names should be descriptive and meaningful. They should represent what the variable is used for.

4)Variable names should be lowercase, except for constants, which are usually written in all uppercase.

5)If a variable name consists of multiple words, they should be separated by underscores, e.g., "my_variable_name".

6)Variables that represent private or internal data should be preceded by a single underscore, e.g., "_my_private_variable".

7)Variables that are intended to be used as constants should be written in all uppercase, e.g., "MY_CONSTANT".



Q2. What will happen if we declare a restricted keyword as a variable?

ans:-
If you declare a restricted keyword as a variable in Python,we will get a syntax error when you try to execute your code. This is because restricted keywords in Python are reserved for specific uses and cannot be used as variable names.

Python has a set of reserved keywords that are used to define the syntax and structure of the language. These keywords cannot be used as variable names, function names, or any other identifiers in our code. If you try to use a reserved keyword as a variable name, we will get a syntax error.

For example, if we try to declare a variable with the name "if" or "while", which are both reserved keywords in Python, you will get a syntax error message similar to the following:

SyntaxError: invalid syntax
To avoid this error, it is important to use descriptive and meaningful variable names that do not conflict with the reserved keywords in Python.


Q3. Can we actually declare a string as a variable name?
ans:-
Yes, we can declare a string as a variable name in Python, but it is not recommended. In Python, variable names should be meaningful and descriptive, and using a string as a variable name can make our code less readable and harder to understand.


Q4. Is it possible for us to declare “_” as a variable? If so, then write an example of it.
ans:-
Yes, it is possible to declare "_" as a variable in Python. In fact, "_" is a valid variable name in Python, although it is usually reserved for special purposes such as storing the result of the last expression in an interactive session.

Here is an example of using "_" as a variable in Python:

_ = 42
print(_)  # Output: 42

In this example, we declare "_" as a variable and assign it the value of 42. We then use the print() function to output the value of the variable, which is 42.


Q5. Using an example, explain how the variables in python are dynamic in nature.
ans:-
In Python, variables are dynamic in nature, which means that they can change their data type and value during runtime.
Let's take an example to understand this concept better:

x = 11
print(type(x))  # Output: <class 'int'>

x = "jay shree ram"
print(type(x))  # Output: <class 'str'>

In this example, we first declare a variable "x" and assign it the value of 11.
We then use the 'type()' function to determine the data type of the variable, which is an integer.

Next, we assign a string value "jay shree ram" to the same variable "x". The data type of the variable now changes to a string, and when we use the 'type()' function again, we get the output as <class 'str'>.

This demonstrates that variables in Python are dynamic and can change their data type and value during runtime. It also means that we don't need to declare the data type of a variable before using it, as Python infers the data type based on the value assigned to the variable.